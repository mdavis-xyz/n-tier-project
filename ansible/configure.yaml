- hosts: all

  vars:
     app_dir: /var/www/webapp
     venv_path: "{{ app_dir }}/venv"
     nginx_group: www-data
     nginx_user: www-data
     vassal_dir: /etc/uwsgi/vassals
     uwsgi_log_dir: /var/log/uwsgi/
     uwsgi_service_name: uwsgi_emperor
     handler_function: serve
     python_file_base: index # no .py here
     database_name: web_data
     sql_user: root
     sql_pass: "{{ lookup('file','../creds/sql_pass.txt') }}"
     sql_host: localhost
     table_name: staff_info

  tasks:

     - name: add nginx apt repo
       apt_repository:
          repo: ppa:nginx/stable
       become: yes

     - name: install dependencies, update apt
       apt:
          name:
             - nginx
             - python3
             - python3-pip
             - tmux # convenience
             - vim  # convenience
             - build-essential # for WSGI (nginx-python)
             - python3-mysqldb
          state: present
          update_cache: yes
       become: yes

     # TODO: create non-root user
     - name: create app directory
       file:
          path: "{{ item }}"
          state: directory
          owner: "{{ nginx_user }}"
          group: "{{ nginx_group }}"
          recurse: yes
       become: yes
       with_items:
          - "{{ app_dir }}"
          - "{{ app_dir }}/static"
       tags:
          - static_content
          - dynamic_content
          - content

     - name: copy static files over
       template:
          src: "static/{{ item }}"
          dest: "{{ app_dir }}/static/{{ item }}"
       with_items:
          - index.html
          - styles.css
          - script.js
       tags:
          - static_content
          - content

     - name: install virtualenv tool
       pip:
          name: virtualenv
          executable: pip3

     - name: create virtual env
       pip:
          name: 
            - flask
            - uwsgi
            - mysql-connector
          virtualenv: "{{ venv_path }}"
          virtualenv_python: python3


     - name: copy python flask script over
       template:
          src: app.py
          dest: "{{ app_dir }}/{{ python_file_base }}.py"
       register: flask_script
       tags:
          - content
          - dynamic_content

     # nginx + flask guide: https://vladikk.com/2013/09/12/serving-flask-with-nginx-on-ubuntu/
     # (with tweaks to template into jinja, and convert to systemd)
     - name: disable default nginx page
       file:
          path: /etc/nginx/sites-enabled/default
          state: absent

     - name: create new nginx conf
       template:
          src: nginx.conf
          dest: /etc/nginx/sites-available/hello.conf
       register: nginx_conf

     - name: enable new nginx conf
       file: 
         src: "{{ nginx_conf.dest }}"
         dest: /etc/nginx/sites-enabled/hello.conf
         state: link

     - name: copy uwsgi conf
       template:
          src: app_uwsgi.ini
          dest: "{{ app_dir }}/app_uwsgi.ini"
       register: uwsgi_ini

     - name: create log dir for uwsgi
       file:
          path: /var/log/uwsgi
          state: directory
          owner: "{{ nginx_user }}"
          group: "{{ nginx_group }}"

     - name: make vassals dir
       file:
          path: "{{ vassal_dir }}"
          state: directory
       # TODO ownership of this dir?

     - name: create link so app is a vassal
       file:
          src: "{{ uwsgi_ini.dest }}"
          dest: "{{ vassal_dir }}/app_uwsgi.ini"
          state: link

     # this is for debugging
     # so you can manually invoke what systemd would invoke
     - name: copy manual emperor script
       template:
          src: run_emperor.sh
          dest: "{{ app_dir }}/run_emperor.sh"
          mode: "+x"

     - name: copy systemd service file
       template:
         src: emperor.service
         dest: /etc/systemd/system/{{ uwsgi_service_name }}.service

     - name: run systemd service for emperor and nginx
       systemd:
          name: "{{ item }}"
          state: restarted # TODO: only restart when really needed
          enabled: yes

       with_items:
          - "{{ uwsgi_service_name }}"
          - nginx
       tags:
          - content
          - dynamic_content

     - name: install mysql
       apt:
          name: mysql-server
       register: mysql_apt
       tags:
          - db_init

     - name: change mysql password
       # TODO? when: mysql_apt is changed
       mysql_user:
          name: "{{ sql_user }}"
          host: localhost
          password: "{{ sql_pass }}"
          login_password: "{{ sql_pass }}"
          login_host: localhost
       tags:
          - db_init

     - name: copy .my.cnf file over
       template:
          src: my.cnf
          dest: "{{ item }}"
          owner: "{{ sql_user }}"
          mode: "600"
       with_items:
          - /etc/mysql/.my.cnf
          - /root/.my.cnf # TODO: account for users in /home
       tags:
          - db_init

     - name: update mysql root password for all root accounts
       mysql_user: 
          name: "{{ sql_user }}"
          host: "{{ item }}"
          password: "{{ sql_pass }}"
          login_password: "{{ sql_pass }}"
          login_host: localhost
       with_items:
        - "{{ ansible_hostname }}"
        - 127.0.0.1
        - ::1
       tags:
          - db_init


     - name: ensure anonymous users are not in the database
       mysql_user: 
          name: '' 
          host: "{{ item }}" 
          state: absent
          login_password: "{{ sql_pass }}"
          login_host: localhost
       with_items:
        - localhost
        - "{{ inventory_hostname }}"
        - 127.0.0.1
        - ::1
       tags:
          - db_init

     - name: remove the test database
       mysql_db: 
          name: test
          state: absent
       tags:
          - db_init

     - name: copy over mysql init script
       template:
         src: database_init.sql
         dest: /tmp/database_init.sql
       register: db_init_script
       tags:
          - db_init

     # there is an ansible module for this
     # but it seems to be unable to detect the required dependencies
     # even though they're definitely installed
     # TODO: password protect sql database
     - name: initialise mysql database
       shell: mysql -u {{ sql_user }} < {{ db_init_script.dest }}
       tags:
         - db_init
#     - name: initialise mysql database
#       mysql_db:
#         state: import
#         name: all
#         target: "{{ db_init_script.dest }}"
#       tags:
#         - db_init

     - name: copy over troubleshooting guide
       template:
          src: troubleshooting.md
          dest: troubleshooting.md
